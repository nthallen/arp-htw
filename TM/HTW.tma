#===============================================================
# ER-2 Flights, May-June 2021; Palmdale, CA, DCOTSS Mission
# Flight HTW.tma.
#===============================================================

#---------------------------------------------------------------
# Partition 1: Main Line Code
#---------------------------------------------------------------

### Need to verify switches before we use them
# Switches - 1100: Algo., 1111: No Algo. (Use runfile.1100 for flight)
# For Flight, 2 Switches in the Off (Zero) Position.
# If either switch in On (1, raised), most algo processing is suspended.
# If both switches are On (1, raised) Shutdown begins immediately.

%{
  #include "msg.h"
  #include "SWData.h"
%}

# INITIALIZE
State Init {
       > Telemetry Start
  +1   > Fail Light Off
  +1   > AI Double Convert Row Zero
  +15  Validate Standby;
}

# WAIT 
State Standby {
#       depending on (OFF_GROUND) { Validate Record; }
        depending on (IN_AIR) { Validate Record; }
        depending on (AI_Fail) { Validate Shutdown; }
}

# RECORD  
State Record {
        depending on (ON_GROUND) { Validate Shutdown; }
        depending on (AI_Fail)   { Validate Shutdown; }
        "In Record";
        Hold until valid (IN_AIR);
        depending on (OFF_GROUND) { Validate Pre_Shutdown; }
}

State Pre_Shutdown {
        depending on (ON_GROUND) { Validate Shutdown; }
        depending on (AI_Fail)   { Validate Shutdown; }
}

# SHUTDOWN
State Shutdown {
      Hold until valid (Ops_Is_Shutdown) or 5:00;
 +5   > Fail Light On
      > quit
}

#---------------------------------------------------------------
# Partition 2: Altitude
#---------------------------------------------------------------
Partition

# This partition converts pressure (altitude) into states 
# (ON_GROUND, OFF_GROUND, IN_AIR). \
# The threshold pressures each have two values - one for 
# the flight up and the other for the flight down.
# This provides hysteresis and prevents bouncing.  
# We are effectively using two switches: 
# 	ON_GROUND and IN_AIR (BELOW CLOUDS = ABOVE CLOUDS)
# REF: 650 torr ~5000 ft
# Palmdale, CA is at elevation 2657'
# Salina, KS is at elevation 1227'

%{ /* Altitude definitions */
    double P_ground_up = 525.;
    double P_ground_dn = 575.;
    double P_clouds_up = 280.;
    double P_clouds_dn = 370.;
    int using_swp = 0;
%}

State ON_GROUND {
  { using_swp = 0; }
  { if (using_swp || (DACS_P > 0 && DACS_P < P_ground_up))
      Validate OFF_GROUND;
  }
}

State OFF_GROUND {
  { if ((using_swp == 2) || (!using_swp && DACS_P > 0 && DACS_P < P_clouds_up)) {
      Validate IN_AIR;
    } else if ((using_swp == 4) || (!using_swp && DACS_P > P_ground_dn)) {
      Validate ON_GROUND;
    }
  }
}

State IN_AIR {
  { if ( (using_swp == 3) || (!using_swp && DACS_P > P_clouds_dn))
      Validate OFF_GROUND;
  }
}

#---------------------------------------------------------------
# Partition 3: Operations
#---------------------------------------------------------------
Partition

%{
  int Ops_Ready_To_Calibrate;
%}

State Ops_Init {
      > Laser TEC Live SetPoints Enable
   +1 > Set Cell Pressure SetPoint 40.0
  +10 Validate Throttle_Valve_Init;
      Hold Until Valid (F_Idle);
      Depending on (Shutdown) { Validate Ops_Shutdown; }
      Depending on (Record) { Validate Ops_Start; }
}

State Ops_Start {
        Depending on (Shutdown) { Validate Ops_Shutdown; }
        Depending on (Pump_Over_Temp) { Validate Ops_Pump_Over_Temp; }
   +1 > Set Cell Pressure SetPoint 140.0
        Validate Flow_PV_PI;
        Hold until (SW_St == SWS_TIMEWARP) or 20:00;
     +2 Hold until (convert(DPV_Sink_T) < 25 || SW_St == SWS_TIMEWARP) or 2:00:00;
        Validate TEC_DPV_Init;
        Validate TEC_LPV_Init;
        Hold until (convert(DetCT) >= 2.05) or 1:00:00;
        Validate Flow_Zero;
        Hold until valid (F_Zero);
   +1 > Set Cell Pressure SetPoint 40.0
        Validate TEC_Cell_Init;
        Validate TEC_LTE_Init;
        Hold until (LTE_T <= LTE_Set_T + 0.1) or 3:00;
    +10 Validate Flow_GD_PI;
        Hold until valid (F_GD_PI);
     +5 Validate QCL_SelectRingandRun;
        Hold until (SW_St == SWS_TIMEWARP) or 60;
        Validate QCL_SelectICOSandRun;
        Validate Ops_Calibrate;
}

State Ops_Calibrate {
      Depending on (Shutdown) { Validate Ops_Shutdown; }
      Depending on (Pre_Shutdown) { Validate Ops_Pre_Shutdown; }
      Depending on (Gas_Pressure_Low) { Validate Ops_Sample; }
      Depending on (Pump_Over_Temp) { Validate Ops_Pump_Over_Temp; }
      Validate Flow_GD_PI;
      Hold until valid (F_GD_PI);
   +1 > Command Bub_In_Vlv_D On
   +1 > Command Bub_Out_Vlv_D On
      Hold until (SW_St == SWS_TIMEWARP) or 59;
   +1 > Bubbler Flow SetPoint 10 sccm
      Hold until (SW_St == SWS_TIMEWARP) or 2:00;
      > Bubbler Flow SetPoint 5 sccm
      Hold until (SW_St == SWS_TIMEWARP) or 2:00;
      Validate Ops_Sample;
}

State Ops_Sample {
  Depending on (Shutdown) { Validate Ops_Shutdown; }
  Depending on (Pre_Shutdown) { Validate Ops_Pre_Shutdown; }
  Depending on (Pump_Over_Temp) { Validate Ops_Pump_Over_Temp; }
  Validate Flow_PV_PI;
  Hold until valid (F_PV_PI);
  Hold until (SW_St == SWS_TIMEWARP) or 1:55:00;
  Depending on (Gas_Pressure_Watch) { Validate Ops_Calibrate; }
}

State Ops_Pre_Shutdown {
     Validate Flow_Zero;
     Hold until valid (F_Zero) or 1:00;
 +10 Validate Flow_GD_PI;
     Hold until valid (F_GD_PI) or 10;
     Validate QCL_SelectRingandRun;
     Hold until (SW_St == SWS_TIMEWARP) or 60;
     Validate QCL_Stop;
     Validate Ops_Shutdown;
}

State Ops_Shutdown {
     > Set Cell Pressure Setpoint 730
     Validate Flow_Fill_Cell;
     Hold until valid (F_Shutdown) or 2:00;
     Validate Ops_Is_Shutdown;
}

State Ops_Pump_Over_Temp {
      { Validate Flow_Idle; }
      { depending on (QCL_Idle) {}
        else Validate QCL_Stop;
      }
      Depending on (Shutdown) { Validate Ops_Is_Shutdown; }
      Hold until valid (F_Idle);
      Depending on (Pump_Watch) {
        Validate QCL_SelectICOSandRun;
        Validate Ops_Sample;
      }
}

State Ops_PV_Failure {
      { depending on (QCL_Idle) {}
        else Validate QCL_Stop;
      }
      Depending on (Shutdown) { Validate Ops_Is_Shutdown; }
      Depending on (PV_Watch) { Validate Ops_Start; }
}

State Ops_Is_Shutdown {}

#---------------------------------------------------------------
# Partition 4: Laser Control JPL 53
#---------------------------------------------------------------
Partition

%{
  int num_QCL_recovers = 0;
  #define LOW_CURRENT 0.02
  #define QCL_TEMP_LIMIT 20
  #define QCL_TEMP_PREC 1.0
  #define QCL_TEMP_OK(x,y) \
  (x < QCL_TEMP_LIMIT && x > y-QCL_TEMP_PREC && x < y+QCL_TEMP_PREC)
  #define LPV_TEMP_OK(x,y) (x < (y+1))
%}
# Mini Starting and Stopping

State QCL_Init {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
  +1  > SSP Stop
  +1  Validate QCLI_Stop;
      Hold until valid (QCLI_Idle);
      Validate QCL_Idle;
}

State QCL_Idle {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    Validate QCLI_Idle;
}

State QCL_Start {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    Hold until ( SSP_Status == SSP_STATUS_READY )
    or 2 else {
      nl_error( 2, "SSP Not Ready in QCL_Start" );
      Validate QCL_SSP_Recover;
    }
    Hold until ( QCL_TEMP_OK(convert(LTE_T),convert(LTE_Set_T)) ) or 20
    else Validate QCL_Out_TSpec;
    Hold until valid (QCLI_Idle) or 2
    else Validate QCLI_Stop;
    Hold until valid (QCLI_Idle);
 +1 > SSP Start
    Hold until ( SSP_Status == SSP_STATUS_ARMED )
    or 20 else {
      nl_error( 2, "Not Armed in QCL_Start" );
      Validate QCL_SSP_Recover;
    }
    Validate QCLI_Run;
    Hold until (SSP_Status == SSP_STATUS_TRIG &&
                convert(Las_I) > LOW_CURRENT) or 20
    else Validate QCL_SSP_Recover;
    { num_QCL_recovers = 0; }
    Validate QCL_Watch;
}

# QCL_NC_1: stop SSP, set NCoadd to 1 and restart SSP
# without shutting down QCLI
State QCL_NC_1 {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
   +1 > SSP Stop
      Hold until (SSP_Status == SSP_STATUS_READY) or 2 else {
        nl_error( 2, "SSP Not Ready in QCL_NC_1" );
        Validate QCL_SSP_Recover;
      }
   +1 > SSP Set NCoadd 1
      > SSP Start
      Hold until (SSP_Status == SSP_STATUS_ARMED ||
                  SSP_Status == SSP_STATUS_TRIG) or 20 else {
        nl_error(2, "Not starting in QCL_NC_1");
        Validate QCL_SSP_Recover;
      }
   +1 Validate QCL_Watch;
}

State QCL_Watch NoLog {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    { if ( SSP_Status == SSP_STATUS_READY ) {
        nl_error( 2, "SSP Went Ready Spontaneously" );
        Validate QCL_SSP_Recover;
      }
    }
    hold until ( SSP_Status != SSP_STATUS_TRIG ||
         !QCL_TEMP_OK(convert(LTE_T),convert(LTE_Set_T)) ||
         convert(Las_I) <= LOW_CURRENT ||
         LTE_DevStatus != 2);
    hold until ( SSP_Status == SSP_STATUS_TRIG &&
         QCL_TEMP_OK(convert(LTE_T),convert(LTE_Set_T)) &&
         convert(Las_I) >= LOW_CURRENT &&
         LTE_DevStatus == 2) or 2
    else Validate QCL_Watch_Recover;
    Validate QCL_Watch;
}

State QCL_Watch_Recover NoLog {
  { if ((LTE_DevStatus != 2) || !QCL_TEMP_OK(convert(LTE_T),convert(LTE_Set_T)))
      Validate QCL_Out_TSpec;
    else if (convert(Las_I) <= LOW_CURRENT)
      Validate QCL_Out_Spec;
    else if (SSP_Status != SSP_STATUS_TRIG)
      Validate QCL_SSP_Recover;
    else Validate QCL_Watch;
  }
}

State QCL_SSP_Recover NoLog {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    > SSP Stop
    { if ( ++num_QCL_recovers > 20 ) {
        nl_error( 2, "Exceeded num_QCL_recovers. Trying reset" );
        num_QCL_recovers = 0;
        Validate QCLI_Stop_Reset;
      }
    }
    Hold until ( SSP_Status == SSP_STATUS_READY ) or 10
    else Validate QCL_SSP_Not_Talking;
 +2 Validate QCLI_Stop;
    Hold until valid (QCLI_Idle);
    Validate QCL_Start;
}

State QCL_SSP_Not_Talking {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    > SSP Stop
    { if ( ++num_QCL_recovers > 20 ) Validate QCL_Fail; }
    Hold until ( SSP_Status == SSP_STATUS_READY ) or 10
    else Validate QCL_SSP_Not_Talking;
    Validate QCL_SSP_Recover;
}

State QCL_Fail {
    > Log Laser Has Failed
    > SSP Stop
    Validate QCLI_Stop;
#    > Laser TEC Disable
    depending on (Shutdown) { Validate QCL_Is_Shutdown; }
}

State QCL_Shutdown {
    > SSP Stop
 +1 Validate QCLI_Stop;
    Hold until valid (QCLI_Idle) or 20;
    > Log Laser Has Shutdown
#    > Laser TEC Disable
    Validate QCL_Is_Shutdown;
}

State QCL_Is_Shutdown {}

State QCL_Out_Spec {
    Validate QCLI_Stop;
    Hold until Valid (QCLI_Idle);
    Validate QCL_Start;
}

State QCL_Out_TSpec {
    Validate QCLI_Stop;
# +1 > Laser TEC Enable
    Hold until valid (QCLI_Idle);
    Hold until ( QCL_TEMP_OK(convert(LTE_T),convert(LTE_Set_T)) &&
                 LPV_TEMP_OK(convert(LPV_T),convert(LPV_Set_T)) &&
                 (LTE_DevStatus == 2));
 +10 Validate QCL_Start;
}

State QCL_Stop {
    Depending on (Shutdown) { Validate QCL_Shutdown; }
    > SSP Stop
 +1 Validate QCLI_Stop;
    Hold until valid (QCLI_Idle);
    Validate QCL_Idle;
}

#Running Waveforms

State QCL_SelectICOSandRun {
      > SSP Stop
      Hold until ( SSP_Status == SSP_STATUS_READY ) or 5
      else { nl_error( 2, "Not Ready in QCL_SelectICOSandRun" ); }
      Hold until valid (QCLI_Idle) or 2
      else Validate QCLI_Stop;
      Hold until valid (QCLI_Idle);
   +1 > Laser TEC Setpoint 5.6 C
   +1 > Laser TEC Enable
      Hold until ( QCL_TEMP_OK(convert(LTE_T),convert(LTE_Set_T)) );
   +2 > Select QCLI Waveform JPL53_400Hz
   +3 Validate QCL_Start;
}

State QCL_SelectRingandRun {
      > SSP Stop
      Hold until ( SSP_Status == SSP_STATUS_READY ) or 5
      else { nl_error( 2, "Not Ready in QCL_SelectRingandRun" ); }
      Hold until valid (QCLI_Idle) or 2
      else Validate QCLI_Stop;
      Hold until valid (QCLI_Idle);
   +1 > Laser TEC Setpoint 5.6 C
   +1 > Laser TEC Enable
      Hold until ( QCL_TEMP_OK(convert(LTE_T),convert(LTE_Set_T)) );
   +2 > Select QCLI Waveform RingRamp
#  +1 > SSP Set NSample 3500
   +2 Validate QCL_Start;
}

#---------------------------------------------------------------
# Partition 5: QCLI Control
#---------------------------------------------------------------
Partition

%{
  int num_QCLI_recovers = 0;
%}

State QCLI_Idle {}

State QCLI_Run {
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else > QCLI clear errors
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else Validate QCLI_Start_Reset;
    > QCLI Run
    { num_QCLI_recovers = 0;
      Validate QCLI_Running;
    }
}

State QCLI_Running {
}

State QCLI_Start_Reset {
    { if ( ++num_QCLI_recovers > 20 ) {
        nl_error( 2,"Exceeded num_QCLI_recovers in QCLI_Start_Reset" );
        Validate QCLI_Fail;
      }
    }
    > Command QCLI_Reset On
 +1 > Command QCLI_Reset Off
    Validate QCLI_Run;
}

State QCLI_Stop {
      > QCLI Stop
      Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
      else > QCLI clear errors
      Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
      else Validate QCLI_Stop_Reset;
      Validate QCLI_Idle;
}

State QCLI_Stop_Reset {
    { if ( ++num_QCLI_recovers > 20 ) {
        nl_error( 2,"Exceeded num_QCLI_recovers in QCLI_Stop_Reset" );
        Validate QCLI_Fail;
      }
    }
    > Command QCLI_Reset On
 +1 > Command QCLI_Reset Off
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else > QCLI clear errors
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else Validate QCLI_Stop_Reset;
    { num_QCLI_recovers = 0;
      ci_sendfcmd( 0, "Select QCLI Waveform Number %d\n", QCLI_Wave );
      Validate QCLI_Idle;
    }
}

State QCLI_Fail {
    { nl_error( 2, "QCLI Not Responding" ); }
 +2:00 Validate QCLI_Stop_Reset;
}

State QCLI_Shutdown {}

#---------------------------------------------------------------
# Partition 6: Pumpkin Troll
# Needs to be written!
#---------------------------------------------------------------
Partition
%{
  int pump_OT_simulated = 0;
%}
State Pump_Watch NoLog {
  { if ( convert(Mains_PumpT) > 75 || convert(Mains_PMotT) > 75 ) {
      msg(2, "Pump over temp: PumpT %.1lf C PMotT %.1lf C",
            convert(Mains_PumpT), convert(Mains_PMotT));
      Validate Pump_Over_Temp;
    }
  }
  { if (SW_St == SWS_PUMP_OVER_TEMP) {
      msg(0, "Pump over temp drill: PumpT %.1lf C PMotT %.1lf C",
            convert(Mains_PumpT), convert(Mains_PMotT));
      pump_OT_simulated = 1;
      Validate Pump_Over_Temp;
    }
  }
}

State Pump_Over_Temp NoLog {
  { if (SW_St == SWS_PUMP_OT_CLEAR) pump_OT_simulated = 0; }
  Hold until ( convert(Mains_PumpT) < 60 && convert(Mains_PMotT) < 60 && !pump_OT_simulated);
  Hold until ( (convert(Mains_PumpT) > 75 || convert(Mains_PMotT) > 75) && !pump_OT_simulated) or 15
  else Validate Pump_Over_Temp;
  Validate Pump_Watch;
}

#---------------------------------------------------------------
# Partition 7: PV Failure State
#---------------------------------------------------------------
Partition

State PV_Watch {}

State PV_Failure NoLog {
  Validate Flow_Idle;
  +1:00 Validate F_PV_Close;
     +1 Hold until valid (F_Idle);
        Validate PV_Watch;
}

#---------------------------------------------------------------
# Partition 8: Realtime File Input
#---------------------------------------------------------------
Partition

State ReadFile_idle {}

State ReadFile "HTW.tmas" {
  +5 Validate ReadFile_idle;
}

#---------------------------------------------------------------
# Partition 9: ReadFile Conditions
#---------------------------------------------------------------
# Summary:
#   RFCond_Idle: Nothing
#   RFCond_TimeWarp: Wait for Time Warp
#---------------------------------------------------------------
Partition

State RFCond_Idle {}

State RFCond_TimeWarp {
  Hold until ( SW_St == SWS_TIMEWARP );
  Resume ReadFile;
  Validate RFCond_Idle;
}

#---------------------------------------------------------------
# Partition 10: Analog Input Monitoring
#---------------------------------------------------------------
Partition

%{
  AI_T30K Last_PC__T = 0;
  static int PC__T_static_count = 0;
  static int PC__T_delta_count = 0;
  static int AI_Reset_count = 0;
  static int AI_Reset_limit = 0;
%}
State AI_Watch {
    { if ( PC__T == Last_PC__T ) {
	if ( ++PC__T_static_count >= 5 ) {
	  msg(2, "PC__T has not changed in 5 seconds");
	  PC__T_delta_count = 0;
	  Validate AI_Reset;
	}
      } else {
	Last_PC__T = PC__T;
	PC__T_static_count = 0;
	if ( ++PC__T_delta_count > 5 ) {
	  PC__T_delta_count = 0;
	  AI_Reset_count = 0;
	}
      }
    }
}

State AI_Reset {
      > AI Reset
  +1  > AI Double Convert Row Zero
      { if ( AI_Reset_limit > 0 &&
	     ++AI_Reset_count >= AI_Reset_limit ) {
	  msg(2,"AI Max Reset Count Reached");
	  Validate AI_Fail;
	}
      }
      Hold until ( PC__T != Last_PC__T ) OR 5
      else Validate AI_Reset;
      Validate AI_Watch;
}

State AI_Fail {}

#--------------------------------------------------------------
# Partition 11: Lab Calibration
#--------------------------------------------------------------
Partition

State Calibrate_Init {}

State Calibrate_Start {
  Validate Flow_GD_PI;
  Hold Until Valid (F_GD_PI);
  Hold Until ( convert(CellP) == convert(Cell_SetP) ) or 30;
  +1 > Command Bub_In_Vlv_D On
  +1 > Command Bub_Out_Vlv_D On
  +5:00 > Bubbler Flow SetPoint 40 sccm
  +5:00 > Bubbler Flow SetPoint 20 sccm
  +5:00 > Bubbler Flow SetPoint 10 sccm
  +5:00 > Bubbler Flow SetPoint 8 sccm
  +5:00 > Bubbler Flow SetPoint 6 sccm
  +5:00 > Bubbler Flow SetPoint 4 sccm
  +5:00 > Bubbler Flow SetPoint 2 sccm
  +5:00 > Bubbler Flow SetPoint 1 sccm
  +5:00 > Bubbler Flow SetPoint 2 sccm
  +5:00 > Bubbler Flow SetPoint 4 sccm
  +5:00 > Bubbler Flow SetPoint 6 sccm
  +5:00 > Bubbler Flow SetPoint 8 sccm
  +5:00 > Bubbler Flow SetPoint 10 sccm
  +5:00 > Bubbler Flow SetPoint 20 sccm
  +5:00 > Bubbler Flow SetPoint 40 sccm
  +5:00 > Bubbler Flow SetPoint 0 sccm
  +5:00    Validate Calibrate_Stop;
}

State Calibrate_Stop {
     Validate Flow_Zero;
  +1 Validate Calibrate_Idle;
}

State Calibrate_Idle {}

