# =============================================================================
# WB57 flights, April 2011; Houston, TX, MACPEX mission.
# Flight HTW.tma.
# =============================================================================


# -----------------------------------------------------------------------------
# Partition 1: Main Line Code
# -----------------------------------------------------------------------------

### Need to verify switches before we use them
# Switches - 1100: Algo., 1111: No Algo. (Use runfile.1100 for flight)
# For Flight, 2 Switches in the Off (Zero) Position.
# If either switch in On (1, raised), most algo processing is suspended.
# If both switches are On (1, raised) Shutdown begins immediately.

# { tma_hold( ( (IOSwS & 3) == 1) || ( (IOSwS & 3) == 2) ); }
#{ depending on (Shutdown) {} 
#   else {
#      if ( (IOSwS & 3) == 3)
#          Validate Shutdown;
#   }
#}

%{
  #include "msg.h"
  #include "swstat.h"
%}

# INITIALIZE
State Init {
       > Telemetry Start
  +1   > Fail Light Off
  +4   Validate Standby;
}

# WAIT 
State Standby {
        depending on (OFF_GROUND) { Validate Record; }
        depending on (IN_AIR) { Validate Record; }
        depending on (AI_Fail)   { Validate Shutdown; }
}

# RECORD  
State Record {
        depending on (ON_GROUND) { Validate Shutdown; }
        # depending on (h2o2failA) { Validate Shutdown; }
        depending on (AI_Fail)   { Validate Shutdown; }
        "In Record";
}

# SHUTDOWN
State Shutdown {
 +10  > Fail Light On
      > quit
}


# -----------------------------------------------------------------------------
# Partition 2: Software Status
# -----------------------------------------------------------------------------

Partition

#     _____________________________________  Above Clouds
#        ^                |
#   swp= | 2 = high       v 3 = low
#     _____________________________________  Below Clouds
#        ^                |
#        | 1 = takeoff    v 4 = landing
#     _____________________________________  Ground   
#

State SW_Stat_Wait NoLog {
  { int reset_it;
    reset_it = 1;
    switch (SW_St) {
      default:
      case 0:   reset_it = 0; break;
      case SWS_TAKEOFF: depending on (ON_GROUND) using_swp = 1; break;
      case SWS_CLIMB: depending on (OFF_GROUND) using_swp = SW_St; break;
      case SWS_DESCEND: depending on (IN_AIR) using_swp = SW_St; break; 
      case SWS_LAND: depending on (OFF_GROUND) using_swp = SW_St; break;

      case SWS_LASER_START: Validate Nano_Start; break;
      case SWS_LASER_STOP: Validate Nano_Stop; break;
      case SWS_LASER_WAVE: Validate Nano_Nano800; break;


      case SWS_TIMEWARP: break;
      case SWS_READFILE: Validate ReadFile; break;
      case SWS_SHUTDOWN: Validate Shutdown; break;
    }
    if (reset_it) Validate SW_Stat_Reset;
  }
}

State SW_Stat_Reset NoLog {
	> _SW Status Set 0
	Hold until (SW_St == 0) or 10;
	Validate SW_Stat_Wait;
}


# -----------------------------------------------------------------------------
# Partition 3: Altitude
# -----------------------------------------------------------------------------

Partition

# This partition converts pressure (altitude) into states 
# (ON_GROUND, OFF_GROUND, IN_AIR). \
# The threshold pressures each have two values - one for 
# the flight up and the other for the flight down.
# This provides hysteresis and prevents bouncing.  
# We are effectively using two switches: 
# 	ON_GROUND and IN_AIR (BELOW CLOUDS = ABOVE CLOUDS)
# REF: 650 torr ~5000 ft

%{ /* Altitude definitions */
    double P_ground_up = 525.;
    double P_ground_dn = 575.;
    double P_clouds_up = 280.;
    double P_clouds_dn = 370.;
    int using_swp = 0;
%}

State ON_GROUND {
  { using_swp = 0; }
  { if (using_swp || (DACS_P > 0 && DACS_P < P_ground_up))
      Validate OFF_GROUND;
  }
}

State OFF_GROUND {
  { if ((using_swp == 2) || (!using_swp && DACS_P > 0 && DACS_P < P_clouds_up)) {
      Validate IN_AIR;
    } else if ((using_swp == 4) || (!using_swp && DACS_P > P_ground_dn)) {
      Validate ON_GROUND;
    }
  }
}

State IN_AIR {
  { if ( (using_swp == 3) || (!using_swp && DACS_P > P_clouds_dn))
      Validate OFF_GROUND;
  }
}


# -----------------------------------------------------------------------------
# Partition 4: Throttle Valve Control
#### Replace this with HOxotope PD control
# -----------------------------------------------------------------------------
# 
# Partition
# 
# State Throttle_Standby {
#   +5
#   depending on (OFF_GROUND) { Validate Throttle_init; }
#   depending on (IN_AIR) { Validate Throttle_init; }
# }
# 
# # INITIALIZE
# State Throttle_init     {
#        > drive Throttle Valve in 48000
#   +2   > drive Throttle Valve out 10000
#   +5   > drive Throttle Valve to 15000
#   +5   Validate Throttle_scan;
# }
# 
# # RUN & SCAN
# State Throttle_scan {
#         depending on (ON_GROUND) { Validate Throttle_shut; }
#         depending on (Shutdown) { Validate Throttle_shut; }
#         > drive Throttle Valve to 47000
#         Hold until (SW_St == SWS_TIMEWARP) or 34:00;
#         > drive Throttle Valve to 40000
#   +2:00 > drive Throttle Valve to 32500
#   +2:00 > drive Throttle Valve to 25000
#   +2:00 Validate Throttle_scan;
# }
# 
# State Throttle_shut {
#   > drive Throttle Valve in 48000
#   > drive Throttle Valve out 20
# }

Partition
#----------------------------------------------------------------
# Partition 7: HTW
#----------------------------------------------------------------
State HTW_Init {
     Depending on (Shutdown) { Validate HTW_Shutdown; }
     Depending on (Nano_Shutdown) { Validate HTW_Shutdown; }
     Depending on (IN_AIR) { Validate HTW_Startup; }
     Depending on (OFF_GROUND) { Validate HTW_Startup; }
}

State HTW_Startup {
     Depending on (Shutdown) { Validate HTW_Shutdown; }
     Depending on (Nano_Shutdown) { Validate HTW_Shutdown; }
     Depending on (ON_GROUND) { Validate HTW_Shutdown; }
     Validate Nano_Nano800;
}

State HTW_Shutdown {}

Partition
#----------------------------------------------------------------
# Partition 8: Laser1 HTW 2.7um Nano Plus
#----------------------------------------------------------------

%{
 int num_Nano_recovers=0;
 #define LOW_CURRENT 0.02
 #define Nano_TEMP_LIMIT 2.3
 #define Nano_TEMP_OK(x) (x < Nano_TEMP_LIMIT)
%}
# Nano1 Starting and Stopping

State Nano_Init {
  +1  > SSP Stop
  +1  > QCLI Stop
      Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
      else > QCLI clear errors
      Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
      else Validate Nano_Stop_Reset;
      Validate Nano_Idle;
}

State Nano_Idle {
    Depending on (Nano_Shutdown) { Validate Nano_Shutdown; }
}

State Nano_Start {
    Depending on (Nano_Shutdown) { Validate Nano_Shutdown; }
    Hold until ( SSP_Status == SSP_STATUS_READY )
    or 2 else {
      nl_error( 2, "SSP Not Ready in Nano_Start" );
      Validate Nano_SSP_Recover;
    }
    Hold until ( Nano_TEMP_OK(convert(LTE2R7T)) );
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 5
    else Validate Nano_QCLI_Recover;
 +1 > SSP Start
    Hold until ( SSP_Status == SSP_STATUS_ARMED )
    or 20 else {
      nl_error( 2, "Not Armed in Nano_Start" );
      Validate Nano_SSP_Recover;
    }
    > QCLI Run
    # Hold until ( SSP_Status == SSP_STATUS_TRIG && convert(HNano_I) > LOW_CURRENT ) or 20
    Hold until ( SSP_Status == SSP_STATUS_TRIG ) or 20
    else Validate Nano_SSP_Recover;
    { num_Nano_recovers = 0; }
    Validate Nano_Watch;
}

State Nano_Watch NoLog {
    Depending on (Nano_Shutdown) { Validate Nano_Shutdown; }
    { if ( SSP_Status == SSP_STATUS_READY ) {
        nl_error( 2, "SSP Went Ready Spontaneously" );
        Validate Nano_SSP_Recover;
      }
    }
         # convert(HNano_I) < LOW_CURRENT ||
    hold until ( SSP_Status != SSP_STATUS_TRIG ||
         !Nano_TEMP_OK(convert(LTE2R7T)) );
    # hold until ( Nano_TEMP_OK(convert(LTE2R7T)) && 
    #     convert(HNano_I) >= LOW_CURRENT) or 1
    hold until ( Nano_TEMP_OK(convert(LTE2R7T)) ) or 2
    else Validate Nano_Out_Spec;
    hold until ( SSP_Status == SSP_STATUS_TRIG ) or 5
    else Validate Nano_SSP_Recover;
    Validate Nano_Watch;
}

State Nano_SSP_Recover NoLog {
    Depending on (Nano_Shutdown) { Validate Nano_Shutdown; }
    > SSP Stop
    { if ( ++num_Nano_recovers > 20 ) {
        nl_error( 2, "Exceeded num_Nano_recovers. Trying reset" );
        num_Nano_recovers = 0;
        Validate Nano_QCLI_Reset;
      }
    }
    Hold until ( SSP_Status == SSP_STATUS_READY ) or 10
    else Validate Nano_SSP_Not_Talking;
 +2 > QCLI Stop
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else > QCLI clear errors
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else Validate Nano_QCLI_Reset;
    Validate Nano_Start;
}

State Nano_SSP_Not_Talking {
    Depending on (Nano_Shutdown) { Validate Nano_Shutdown; }
    > SSP Stop
    { if ( ++num_Nano_recovers > 20 ) Validate Nano_Fail; }
    Hold until ( SSP_Status == SSP_STATUS_READY ) or 10
    else Validate Nano_SSP_Not_Talking;
    Validate Nano_SSP_Recover;
}

State Nano_Fail {
    > Log Laser System 1 Has Failed
 +1 Validate Nano_Shutdown;
}

State Nano_Shutdown {
    > SSP Stop
 +1 > QCLI Stop
    Hold until ( !(QCLI_s & 0x1000) ) or 2
    else Validate Nano_Shutdown_Reset;
    > Log Laser System 1 Has Shutdown
}

State Nano_Shutdown_Reset {
    > Command QCLI_Reset On
 +1 > Command QCLI_Reset Off
    Validate Nano_Shutdown;
}

State Nano_Out_Spec {
    > QCLI Stop
 +1 Validate Nano_QCLI_Recover;
}

State Nano_QCLI_Recover {
   Depending on (Nano_Shutdown) { Validate Nano_Shutdown; }

 +1  { nl_error( 2, "QCLI reporting error status 0x%04X", QCLI_s ); }
 +1  > QCLI Clear Errors
     Hold until ( (QCLI_s & 0x3938) == 0 ) or 5
     else {
       nl_error( 2, "QCLI error did not clear: Resetting" );
       Validate Nano_QCLI_Reset;
     }
     Validate Nano_Start;
}

State Nano_QCLI_Reset {
    Depending on (Nano_Shutdown) { Validate Nano_Shutdown; }
    { if ( ++num_Nano_recovers > 20 ) {
        nl_error( 2,"Exceeded num_Nano_recovers in QCLI_Reset: Invoking shutdown" );
        Validate Nano_Fail;
      }
    }
 +1 > Command QCLI_Reset On
    > Command QCLI_Reset Off
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else > QCLI clear errors
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else Validate Nano_QCLI_Reset;
    { ci_sendfcmd( 0, "Select QCLI Waveform Number %d\n", QCLI_Wave );
      Validate Nano_Start;
    }
}

State Nano_Stop {
    Depending on (Nano_Shutdown) { Validate Nano_Shutdown; }
    > SSP Stop
 +1 > QCLI Stop
    Hold until ( !(QCLI_s & 0x1000)) or 2
    else Validate Nano_Stop_Reset;
    Hold until ( SSP_Status == SSP_STATUS_READY ) or 5
    else { nl_error( 2, "Not Ready in Nano_Stop" ); }
    Validate Nano_Idle;
}

State Nano_Stop_Reset {
    > Command QCLI_Reset On
 +1 > Command QCLI_Reset Off
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else > QCLI clear errors
    Hold until ( (QCLI_s & 0x3938) == 0 ) or 2
    else Validate Nano_Stop_Reset;
    { ci_sendfcmd( 0, "Select QCLI Waveform Number %d\n", QCLI_Wave );
      Validate Nano_Idle;
    }
}

#Running Waveforms

State Nano_Nano800 {
    Depending on (Nano_Shutdown) { Validate Nano_Shutdown; }
    > SSP Stop
    Hold until ( SSP_Status == SSP_STATUS_READY ) or 5
    else { nl_error( 2, "Not Ready in Nano_Nano800" ); }
    > QCLI Stop
    Hold until ( !(QCLI_s & 0x1000) ) or 2
    else Validate Nano_Nano800_Reset;
 +2 > Select QCLI Waveform Nano800Hz
 +2 Validate Nano_Start;
}

State Nano_Nano800_Reset {
    > Command QCLI_Reset On
 +1 > Command QCLI_Reset Off
    Hold until ( !(QCLI_s & 0x1000) ) or 2
    else Validate Nano_Nano800_Reset;
    Validate Nano_Nano800;
}

Partition
# -----------------------------------------------------------------------------
# Partition 9: Realtime File Input
# -----------------------------------------------------------------------------

State ReadFile_idle {}

State ReadFile "HTW.tmas" {
  +5 Validate ReadFile_idle;
}

Partition
#---------------------------------------------------------------
# Partition 10: ReadFile Conditions
#---------------------------------------------------------------
# Summary:
#   RFCond_Idle: Nothing
#   RFCond_TimeWarp: Wait for Time Warp
#---------------------------------------------------------------

State RFCond_Idle {}

State RFCond_TimeWarp {
  Hold until ( SW_St == SWS_TIMEWARP );
  Resume ReadFile;
  Validate RFCond_Idle;
}

Partition
#---------------------------------------------------------------
# Partition 11: Analog Input Monitoring
#---------------------------------------------------------------
%{
  AI_T30K Last_PC__T = 0;
  static int PC__T_static_count = 0;
  static int PC__T_delta_count = 0;
  static int AI_Reset_count = 0;
  static int AI_Reset_limit = 0;
%}
State AI_Watch {
    { if ( PC__T == Last_PC__T ) {
	if ( ++PC__T_static_count >= 5 ) {
	  msg(2, "PC__T has not changed in 5 seconds");
	  PC__T_delta_count = 0;
	  Validate AI_Reset;
	}
      } else {
	Last_PC__T = PC__T;
	PC__T_static_count = 0;
	if ( ++PC__T_delta_count > 5 ) {
	  PC__T_delta_count = 0;
	  AI_Reset_count = 0;
	}
      }
    }
}

State AI_Reset {
      > AI Reset
  +1  > AI Double Convert Row Zero
      { if ( AI_Reset_limit > 0 &&
	     ++AI_Reset_count >= AI_Reset_limit ) {
	  msg(2,"AI Max Reset Count Reached");
	  Validate AI_Fail;
	}
      }
      Hold until ( PC__T != Last_PC__T ) OR 5
      else Validate AI_Reset;
      Validate AI_Watch;
}

State AI_Fail {}
