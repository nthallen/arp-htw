PARTITION
# PARTITION X: Throttle Valve
#   For HTW, we are calling this the "Throttle Valve"
#---------------------------------------------------------------
# Summary:
#   PD_Valve_Init - Startup. Does nothing
#   PD_Valve_Close - Drives to in limit or complains
#   PD_Valve_Closed - Where we go after closing valve.
#   PD_Valve_Failure - Reports in limit failure and sits
#   PD_Valve_PI_Init - How we get to PD_Valve_PI
#   PD_Valve_PI - Diff Pressure control algo
#   PD_Valve_Scan - Perform a scan, then go back to PI
#---------------------------------------------------------------

%{
  double DP_sum;
  double PDV_Gp = 16.0;
  double PDV_Gi = 4.0;
  double PDV_SetP = 0.;
  int scan_done = 0;

  #define MAX_PDV_STEPS 4000
  #include <math.h> /* for fabs */
%}

State PD_Valve_Startup {}

#---------------------------------------------------------------
# Initialization is triggered by the mainline, since we have
# to wait for solenoids and steppers power.
#---------------------------------------------------------------
State PD_Valve_Init {
  +1 > Set Throttle Valve Speed 1067 Hz
# +1 > Throttle Valve Set Gain Gp 8.0
# +1 > Throttle Valve Set Gain Gi 2.0
# +1 > Throttle Valve Set Pressure SetPoint 0.
  +3 > Drive Throttle Valve in 8000
  +2 > Drive Throttle Valve out 0
  +2 > Drive Throttle Valve out 2100
  depending on (IN_AIR) { Validate PD_Valve_PI_Init; }
}

State PD_Valve_Close {
  depending on (shutdown) { Validate PD_Valve_Shutdown; }
  +1 > Drive Throttle Valve in 8000
     Hold Until ( TVStat & 1 ) or 5
     else Validate PD_Valve_Failure;
     > Drive Throttle Valve out 0
     Hold Until ( TVStep == 0 ) or 2
     else { msg( 2, "Throttle Valve step did not reset" ); }
     > Preset Throttle Valve Position to 0
     Validate PD_Valve_Closed;
}

State PD_Valve_Closed {
  depending on (shutdown) { Validate PD_Valve_Shutdown; }
  depending on (IN_AIR) {
    Validate PD_Valve_PI_Init;
  }
}

#---------------------------------------------------------------
# In limit not observed: Retry periodically
#---------------------------------------------------------------
State PD_Valve_Failure {
  depending on (shutdown) { Validate PD_Valve_Shutdown; }

  { msg( 2, "Throttle Valve did not close" ); }
  +1:00 Validate PD_Valve_Close;
}

State PD_Valve_PI_Init {
    { DP_sum = 2100; }
    Validate PD_Valve_PI;
}

State PD_Valve_PI NoLog {
  # depending on (OFF_GROUND) { Validate PD_Valve_Close; }
# depending on (scanning) {
#	if ( !scan_done ) {
#	  scan_done = 1;
#	  Validate PD_Valve_Scan;
#	}
# }
# depending on (record) { scan_done = 0; }
  # depending on (ON_GROUND) { Validate PD_Valve_Close; }
  { double DP, Gp, Gi, DP_diff, DP_set, dstep;
    unsigned short ustep;
    DP = convert(PD_DP);
    DP_set = PDV_SetP; /* convert(PDV_SetP); */
    Gp = PDV_Gp; /* convert(PDV_Gp); */
    Gi = PDV_Gi; /* convert(PDV_Gi); */
    DP_diff = DP - DP_set;
    DP_sum += DP_diff * Gi;
    if ( DP_sum > MAX_PDV_STEPS )
      DP_sum = MAX_PDV_STEPS;
    else if ( DP_sum < -MAX_PDV_STEPS )
      DP_sum = -MAX_PDV_STEPS/Gi;

    dstep = DP_diff * Gp + DP_sum;
    if (dstep<0) dstep = 0;
    else if (dstep > MAX_PDV_STEPS) dstep = MAX_PDV_STEPS;
    ustep = US_CAST(dstep);
    ci_sendfcmd(2, "Drive Throttle Valve To %u\n", ustep);
  }

  "Regulating";
  Hold Until ( TVStat & 1 );
  "Saw PDV in limit: Make sure it comes off";
  Hold Until ( ! (TVStat & 1) ) or 30
  else Validate PD_Valve_Close;
  Validate PD_Valve_PI;
}

State PD_Valve_Scan {
    # depending on (OFF_GROUND) { Validate PD_Valve_Close; }
    # depending on (ON_GROUND) { Validate PD_Valve_Close; }

    > Drive Throttle Valve In 8000
    Hold Until ( TVStat & 1 ) or 6;
    # else Validate PD_Valve_Close;
 +5 > Scan Throttle Valve Out 4000 By 40
    Hold Until ( TVScan != 0 ) or 1;
    Hold Until ( TVScan == 0 ) or 30;
    > Stop Throttle Valve
    Hold Until ( TVScan == 0 ) or 3; 
    > Drive Throttle Valve To 2100
 +2 Validate PD_Valve_PI_Init;
}

State PD_Valve_Shutdown {}
